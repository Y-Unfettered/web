var list = [{
    "title":"CSS3学习记录",
    "content":[
        {
            "id":"0",
            "title":"三种挂载方式",
            "content":{
                "page":[
                    {
                        "key":"&lt;div style='background: #000000;width: 100px;height: 100px;color:#fff;'&gt;行间样式&lt;/div&gt;",
                        "value":"行间样式"
                    },
                    {
                        "key":"&lt;link rel='stylesheet' href='css/hellocss.css'&gt;",
                        "value":"引入外部css文件 引入的地方在head里面 使用link标签引入"
                    },
                    {
                        "key":"&lt;style&gt;&lt;/style&gt;",
                        "value":"也是在head里面 不过是在里面写 使用style标签将要写的样式包含起来"
                    }
                ]
            }
        },
        {
            "id":"1",
            "title":"CSS选择器",
            "content":{
                "page":[
                    {
                        "key":"#id",
                        "value":"id选择器"
                    },
                    {
                        "key":".class",
                        "value":"class选择器"
                    },
                    {
                        "key":"div",
                        "value":"标签选择器"
                    },
                    {
                        "key":"*",
                        "value":"通配符选择器"
                    },
                    {
                        "key":".father .son",
                        "value":"父子选择器"
                    },
                    {
                        "key":"div>p",
                        "value":"直接子选择器"
                    },
                    {
                        "key":"#id,#id,#id",
                        "value":"同组选择器"
                    },
                    {
                        "key":".class.class",
                        "value":"并列选择器"
                    },
                    {
                        "key":":nth-child(n)",
                        "value":"匹配父元素的第n个子元素"
                    }
                ]
            }
        },
        {
            "id":"2",
            "title":"CSS伪类",
            "content":{
                "page":[
                    {
                        "key":":active",
                        "value":"向被激活的元素添加样式"
                    },
                    {
                        "key":":focus",
                        "value":"向拥有键盘输入焦点的元素添加样式"
                    },
                    {
                        "key":":hover",
                        "value":"当鼠标悬浮在元素上方时，向元素添加样式"
                    },
                    {
                        "key":":link",
                        "value":"向未被访问的链接添加样式"
                    },
                    {
                        "key":":visited",
                        "value":"向已被访问的链接添加样式"
                    },
                    {
                        "key":":first-child",
                        "value":"向元素的第一个子元素添加样式"
                    },
                    {
                        "key":":lang",
                        "value":"向带有指定 lang 属性的元素添加样式"
                    }
                ]
            }
        },
        {
            "id":"3",
            "title":"CSS伪元素",
            "content":{
                "page":[
                    {
                        "key":"::first-letter",
                        "value":"设置对象内的第一个字符的样式"
                    },
                    {
                        "key":"::first-line",
                        "value":"设置对象内的第一行的样式"
                    },
                    {
                        "key":"::before",
                        "value":"设置在对象前（依据对象树的逻辑结构）发生的内容,用来和content属性一起使用，并且必须定义content属性"
                    },
                    {
                        "key":"::after",
                        "value":"设置在对象后（依据对象树的逻辑结构）发生的内容,用来和content属性一起使用，并且必须定义content属性"
                    },
                    {
                        "key":"::selection",
                        "value":"设置对象被选择时的样式"
                    }
                ]
            }
        },
        {
            "id":"4",
            "title":"CSS定位",
            "content":{
                "page":[
                    {
                        "key":"position",
                        "value":"relative | absolute | fixed"
                    },
                    {
                        "key":"relative",
                        "value":"对象遵循常规流"
                    },
                    {
                        "key":"absolute",
                        "value":"对象脱离常规流，对最近的relative为父级，进行定位"
                    },
                    {
                        "key":"fixed",
                        "value":"根据视窗进行定位"
                    },
                    {
                        "key":"z-index",
                        "value":"元素在当前层叠上下文中的层叠级别"
                    },
                    {
                        "key":"float",
                        "value":"浮动 | left：设置对象浮在左边 | right：设置对象浮在右边"
                    },
                    {
                        "key":"margin",
                        "value":"检索或设置对象四边的外延边距"
                    },
                    {
                        "key":"padding",
                        "value":"检索或设置对象四边的内部边距"
                    }
                ]
            }
        },
        {
            "id":"5",
            "title":"CSS动画过渡",
            "content":{
                "page":[
                    {
                        "key":"transform",
                        "value":"设置或检索对象的转换"
                    },
                    {
                        "key":"transition",
                        "value":"对象变换时的过渡"
                    },
                    {
                        "key":"animation",
                        "value":"对象所应用的动画特效"
                    }
                ]
            }
        },
        {
            "id":"6",
            "title":"CSS的盒子模型",
            "content":{
                "page":[
                    {
                        "key":"IE中的盒子模型的",
                        "value":"占据的 width =  margin + width;实际的 width = border * 2 + padding * 2 + contentWidth <br>并且一旦你的width定了，border和padding增大，contentWidth就会减小"
                    },
                    {
                        "key":"W3C盒子模型（标准模型）",
                        "value":"占据的 width = margin * 2 + border * 2 + padding * 2 + contentWidth; <br>实际的 width = contentWidth"
                    }
                ]
            }
        },
        {
            "id":"7",
            "title":"CSS的常见问题",
            "content":{
                "page":[
                    {
                        "key":"link和@import的区别",
                        "value":"两个都可以引入css文件，但是使用link引入css文件，加载时间是和DOM树同时加载；@import引入的css加载时间是在DOM树加载完成后进行，这就会形成一个没有样式的时间，也就是会形成一个空白时间"
                    },
                    {
                        "key":"清除浮动",
                        "value":"浮动元素碰到包含它的边框或者者浮动元素的边框停留 <br>浮动带来的问题：<br>1、父元素的高度无法被撑开，影响与父元素同级的元素 <br>2、与浮动元素同级的非浮动元素（内联元素）会跟随其后 <br>3、若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构 <br>清理浮动的方式： <br>1、父级div定义height  <br>2、最后一个浮动元素后加空div标签 并增加样式clear:both  <br>3、包含浮动元素的父标签增加样式overflow为hidden或者auto <br>4、父级div定义zoom"
                    },
                    {
                        "key":"display:none与visibility：hidden",
                        "value":"display：none 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）<br>visibility：hidden 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）"
                    },
                    {
                        "key":"纯CSS创立一个三角形",
                        "value":"利用border来实现<br>width: 0;height: 0;<br>border-top: 40px solid transparent;<br>border-left: 40px solid transparent;<br>border-right: 40px solid transparent;<br>border-bottom: 40px solid #ff0000;"
                    },
                    {
                        "key":"flexbox（弹性盒布局模型）",
                        "value":"该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间<br>试使用场景：弹性布局适合于移动前台开发，在Android和ios上也完美支持。"
                    },
                    {
                        "key":"CSS优先级算法",
                        "value":"元素选择符：&nbsp;&nbsp;&nbsp;1<br>class选择符：&nbsp;&nbsp;&nbsp; 10<br>id选择符：&nbsp;&nbsp;&nbsp;100<br>元素标签：&nbsp;&nbsp;&nbsp;1000"
                    },
                    {
                        "key":"属性继承",
                        "value":"可继承的属性：font-size, font-family, color<br>不可继承的样式：border, padding, margin, width, height"
                    },
                    {
                        "key":"box-sizing属性",
                        "value":"更改盒模型，默认为content-box<br>context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽<br>border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽"
                    }
                ]
            }
        }
    ]
}]
